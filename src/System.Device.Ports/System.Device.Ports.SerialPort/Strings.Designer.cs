//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System.Device.Ports.SerialPort {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("System.Device.Ports.SerialPort.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given port name ({0}) does not resolve to a valid serial port.
        /// </summary>
        internal static string Arg_InvalidSerialPort {
            get {
                return ResourceManager.GetString("Arg_InvalidSerialPort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given port name is invalid.  It may be a valid port, but not a serial port.
        /// </summary>
        internal static string Arg_InvalidSerialPortExtended {
            get {
                return ResourceManager.GetString("Arg_InvalidSerialPortExtended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument must be between {0} and {1}.
        /// </summary>
        internal static string ArgumentOutOfRange_Bounds_Lower_Upper {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_Bounds_Lower_Upper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enum value was out of legal range.
        /// </summary>
        internal static string ArgumentOutOfRange_Enum {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_Enum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Positive number required.
        /// </summary>
        internal static string ArgumentOutOfRange_NeedPosNum {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_NeedPosNum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The timeout must be greater than or equal to -1.
        /// </summary>
        internal static string ArgumentOutOfRange_Timeout {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_Timeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The timeout must be either a positive number or -1.
        /// </summary>
        internal static string ArgumentOutOfRange_WriteTimeout {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_WriteTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot be set while the port is open.
        /// </summary>
        internal static string Cant_be_set_when_open {
            get {
                return ResourceManager.GetString("Cant_be_set_when_open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RtsEnable cannot be accessed if Handshake is set to RequestToSend or RequestToSendXOnXOff.
        /// </summary>
        internal static string CantSetRtsWithHandshaking {
            get {
                return ResourceManager.GetString("CantSetRtsWithHandshaking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument &apos;{0}&apos; cannot be zero-length.
        /// </summary>
        internal static string EmptyString {
            get {
                return ResourceManager.GetString("EmptyString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid value was passed to DataBits.
        /// </summary>
        internal static string InvalidDataBits {
            get {
                return ResourceManager.GetString("InvalidDataBits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create &apos;{0}&apos; because a file or directory with the same name already exists.
        /// </summary>
        internal static string IO_AlreadyExists_Name {
            get {
                return ResourceManager.GetString("IO_AlreadyExists_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file &apos;{0}&apos; already exists.
        /// </summary>
        internal static string IO_FileExists_Name {
            get {
                return ResourceManager.GetString("IO_FileExists_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find the specified file.
        /// </summary>
        internal static string IO_FileNotFound {
            get {
                return ResourceManager.GetString("IO_FileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find file &apos;{0}&apos;.
        /// </summary>
        internal static string IO_FileNotFound_FileName {
            get {
                return ResourceManager.GetString("IO_FileNotFound_FileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find a part of the path.
        /// </summary>
        internal static string IO_PathNotFound_NoPathName {
            get {
                return ResourceManager.GetString("IO_PathNotFound_NoPathName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find a part of the path &apos;{0}&apos;.
        /// </summary>
        internal static string IO_PathNotFound_Path {
            get {
                return ResourceManager.GetString("IO_PathNotFound_Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified file name or path is too long, or a component of the specified path is too long.
        /// </summary>
        internal static string IO_PathTooLong {
            get {
                return ResourceManager.GetString("IO_PathTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path &apos;{0}&apos; is too long, or a component of the specified path is too long.
        /// </summary>
        internal static string IO_PathTooLong_Path {
            get {
                return ResourceManager.GetString("IO_PathTooLong_Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The process cannot access the file &apos;{0}&apos; because it is being used by another process.
        /// </summary>
        internal static string IO_SharingViolation_File {
            get {
                return ResourceManager.GetString("IO_SharingViolation_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The process cannot access the file because it is being used by another process.
        /// </summary>
        internal static string IO_SharingViolation_NoFileName {
            get {
                return ResourceManager.GetString("IO_SharingViolation_NoFileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum baud rate for the device is {0}.
        /// </summary>
        internal static string Max_Baud {
            get {
                return ResourceManager.GetString("Max_Baud", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operating system &apos;{0}&apos; is not supported.
        /// </summary>
        internal static string NotSupported_OperatingSystem {
            get {
                return ResourceManager.GetString("NotSupported_OperatingSystem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stream does not support seeking.
        /// </summary>
        internal static string NotSupported_UnseekableStream {
            get {
                return ResourceManager.GetString("NotSupported_UnseekableStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The port is already open.
        /// </summary>
        internal static string Port_already_open {
            get {
                return ResourceManager.GetString("Port_already_open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The port is closed.
        /// </summary>
        internal static string Port_not_open {
            get {
                return ResourceManager.GetString("Port_not_open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value for StopBits is invalid.
        /// </summary>
        internal static string StopBits_Invalid {
            get {
                return ResourceManager.GetString("StopBits_Invalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to the path is denied.
        /// </summary>
        internal static string UnauthorizedAccess_IODenied_NoPathName {
            get {
                return ResourceManager.GetString("UnauthorizedAccess_IODenied_NoPathName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to the path &apos;{0}&apos; is denied.
        /// </summary>
        internal static string UnauthorizedAccess_IODenied_Path {
            get {
                return ResourceManager.GetString("UnauthorizedAccess_IODenied_Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The underlying Win32 error is: 0x{0:X8}.
        /// </summary>
        internal static string Win32Error {
            get {
                return ResourceManager.GetString("Win32Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows port names must start with &apos;COM&apos; followed by a number.
        /// </summary>
        internal static string WinPortName_wrong {
            get {
                return ResourceManager.GetString("WinPortName_wrong", resourceCulture);
            }
        }
    }
}
