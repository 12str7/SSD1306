// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Device.I2c;

namespace Iot.Device.Mcp3428 
{
    public class Mcp3427 : Mcp342x 
    {
        /// <summary>
        /// The number of channels
        /// </summary>
        /// <autogeneratedoc />
        private const int NumChannels = 2;

        /// <inheritdoc />
        public Mcp3427(I2cDevice i2CDevice) : base(i2CDevice, NumChannels) 
        {        
        }

        /// <inheritdoc />
        public Mcp3427(I2cDevice i2CDevice, ModeEnum mode = ModeEnum.Continuous, ResolutionEnum resolution = ResolutionEnum.Bit12, GainEnum pgaGain = GainEnum.X1) : this(i2CDevice) 
        {
            SetConfig(0, mode: mode, resolution: resolution, pgaGain: pgaGain);
        }

        /// <summary>
        /// Determine device I2C address based on the configuration pin states.
        /// </summary>
        /// <param name="Adr0">The adr0 pin state</param>
        /// <param name="Adr1">The adr1 pin state</param>
        /// <returns>System.Int32.</returns>
        public static int I2CAddressFromPins(PinState Adr0, PinState Adr1) { return Helpers.I2CAddressFromPins(Adr0, Adr1); }
    }
}
