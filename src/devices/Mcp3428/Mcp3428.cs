// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System;
using System.Buffers.Binary;
using System.Device.Gpio;
using System.Device.I2c;
using System.Device.I2c.Drivers;
using System.Device.Spi;
using System.Device.Spi.Drivers;
using System.IO;

namespace Iot.Device.Mcp3428
{
    public class Mcp3428 : IDisposable
    {
        private const int MaxRetries = 5;
        private readonly I2cDevice _i2cDevice;
        private readonly byte[] _readBuffer = new byte[4];
        private byte _lastChannel = 0xFF;
        private double _lastValue;
        private byte _lastConfigByte => _readBuffer[3];
        private bool _isReadyBit = false;

        //Config params
        private GainEnum _pgaGain = GainEnum.X1;
        private ResolutionEnum _resolution = ResolutionEnum.Bit12;
        private ModeEnum _mode = ModeEnum.Continuous;

        public ResolutionEnum Resolution
        {
            get => _resolution;
            private set => _resolution = value;
        }

        public GainEnum PGAGain
        {
            get => _pgaGain;
            private set => _pgaGain = value;
        }

        public ModeEnum Mode
        {
            get => _mode;
            private set => _mode = value;
        }

        public Mcp3428(I2cDevice i2CDevice)
        {
            _i2cDevice = i2CDevice;
            ReadValue(); // Don't like this, makes sure props are valid
        }

        public Mcp3428(I2cDevice i2CDevice, ModeEnum mode = ModeEnum.Continuous,
            ResolutionEnum resolution = ResolutionEnum.Bit12, GainEnum pgaGain = GainEnum.X1):this(i2CDevice)
        {
            Resolution = resolution;
            Mode = mode;
            PGAGain = pgaGain;
        }

        public void Dispose()
        {
        }

        private double ReadValue(int channel = -1)
        {
            if (Mode == ModeEnum.OneShot)
            {
                OneShotRead(channel);
            }
            else
            {
                if (channel > 0 && channel != _lastChannel)
                {
                    var conf = SetChannelBits(_lastConfigByte, channel);
                    WriteConfig(conf);
                }
                _i2cDevice.Read(_readBuffer);
                ReadConfigByte(_lastConfigByte);
            }

            var value = BinaryPrimitives.ReadInt16LittleEndian(_readBuffer.AsSpan().Slice(1, 2));
            _lastValue = value * LSBValue(Resolution);
            return _lastValue;
        }

        private void OneShotRead(int channel = -1)
        {
            if (Mode != ModeEnum.OneShot)
                throw new IOException("Device is not in One-Shot mode");
            var tries = 0;
            _isReadyBit = false;
            var conf = SetReadyBit(_lastConfigByte, false);
            if (channel >= 0)
            {
                conf = SetChannelBits(conf, channel);
            }
            WriteConfig(conf);
            while (!_isReadyBit && tries < MaxRetries)
            {
                _i2cDevice.Read(_readBuffer);
                ReadConfigByte(_lastConfigByte);
                tries++;
            }

            if (!_isReadyBit)
            {
                throw new IOException($"ADC Conversion was not ready after {tries} attempts.");
            }
        }

        private void ReadConfigByte(byte config)
        {
            _isReadyBit = (config & Masks.ReadyMask) == 0; // Negated bit
            _lastChannel = (byte) ((config & Masks.ChannelMask) >> 5);
            _mode = (ModeEnum) (config & Masks.ModeMask);
            _pgaGain = (GainEnum) (config & Masks.GainMask);
            _resolution = (ResolutionEnum) (config & Masks.ResolutionMask);
        }

        public enum ResolutionEnum : byte { Bit12 = 0, Bit14 = 4, Bit16 = 8 } // From datasheet 5.2
        public enum GainEnum :byte{ X1 = 0, X2 = 1, X3 = 2, X4 =3}
        public enum ModeEnum : byte {  OneShot=0, Continuous=16 }
        public enum PinState { Low, High, Floating }

        /// <summary>
        /// Address from pin configuration. Based on documentation TABLE 5-3-
        /// </summary>
        /// <param name="Adr1">The adr1.</param>
        /// <param name="Adr0">The adr0.</param>
        /// <returns>System.Byte.</returns>
        /// <exception cref="ArgumentException">Invalid combination</exception>
        /// <autogeneratedoc />
        public static byte AddressFromPins(PinState Adr1, PinState Adr0)
        {
            byte addr = 0b11010000; // Base value from doc

            switch (new ValueTuple<PinState, PinState>(Adr0, Adr1))
            { //TODO Remove C# 8 dependency for pull request
                case (PinState.Low, PinState.Low):
                case (PinState.Floating, PinState.Floating):
                    break;
                case (PinState.Low, PinState.Floating):
                    addr += 1;
                    break;
                case (PinState.Low, PinState.High):
                    addr += 2;
                    break;
                case (PinState.High, PinState.Low):
                    addr += 4;
                    break;
                case (PinState.High, PinState.Floating):
                    addr += 5;
                    break;
                case (PinState.High, PinState.High):
                    addr += 6;
                    break;
                case (PinState.Floating, PinState.Low):
                    addr += 3;
                    break;
                case (PinState.Floating, PinState.High):
                    addr += 7;
                    break;
                default:
                    throw new ArgumentException("Invalid combination");
            }

            return addr;
        }

        private void WriteConfig(byte configByte)
        {
            _i2cDevice.WriteByte(configByte);
            ReadConfigByte(configByte);
        }

        private byte SetResolutionBits(byte configByte, ResolutionEnum resolution)
        {
            return (byte) ((configByte & ~Masks.ReadyMask)|(byte)resolution);
        }

        private byte SetReadyBit(byte configByte, bool ready)
        {
            
            return (byte) (ready ? configByte & ~Masks.ReadyMask : configByte | Masks.ReadyMask);
        }

        private byte SetModeBit(byte configByte, ModeEnum mode)
        {
            return (byte)((configByte & ~Masks.ModeMask) | (byte)mode);
        }

        private byte SetGainBits(byte configByte, GainEnum gain)
        {
            return (byte)((configByte & ~Masks.GainMask) | (byte)gain);
        }

        private byte SetChannelBits(byte configByte, int channel)
        {
            if (channel > 3 || channel < 0)
                throw new ArgumentException("Channel numbers are only valid 0 to 3",nameof(channel));
            return (byte)((configByte & ~Masks.ChannelMask) | (byte)channel);
        }


        private static double LSBValue(ResolutionEnum res)
        {
            switch (res)
            {
                case ResolutionEnum.Bit12:
                    return 1e-3;
                case ResolutionEnum.Bit14:
                    return 250e-6;
                case ResolutionEnum.Bit16:
                    return 62.5e-6;
                default:
                    throw new ArgumentOutOfRangeException(nameof(res), res, null);
            }
        }

        // From datasheet 5.2
        private static class Masks
        {
            public const byte GainMask = 0b00000011;
            public const byte ResolutionMask = 0b00001100;
            public const byte ModeMask = 0b00010000;
            public const byte ChannelMask = 0b01100000;
            public const byte ReadyMask = 0b10000000;
        }
    }
}
