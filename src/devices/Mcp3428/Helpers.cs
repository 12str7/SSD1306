// Mcp3428::Mcp3428
// Filename: Helpers.cs
// Created: 2019_04_05
// Edited: 20190405
// Creator: Máté Kullai

using System;

namespace Iot.Device.Mcp3428
{
    #region Public Enums

    public enum GainEnum : byte { X1 = 0, X2 = 1, X4 = 2, X8 = 3 }

    public enum ModeEnum : byte { OneShot = 0, Continuous = 16 }

    public enum PinState { Low, High, Floating }

    public enum ResolutionEnum : byte { Bit12 = 0, Bit14 = 4, Bit16 = 8 }

    #endregion Public Enums

    internal static class Helpers
    {
        public static double LSBValue(ResolutionEnum res)
        {
            switch (res)
            {
                case ResolutionEnum.Bit12:
                    return 1e-3;

                case ResolutionEnum.Bit14:
                    return 250e-6;

                case ResolutionEnum.Bit16:
                    return 62.5e-6;

                default:
                    throw new ArgumentOutOfRangeException(nameof(res), res, null);
            }
        }

        // From datasheet 5.2
        /// <summary>
        /// Address from pin configuration. Based on documentation TABLE 5-3-
        /// </summary>
        /// <param name="Adr1">The adr1.</param>
        /// <param name="Adr0">The adr0.</param>
        /// <returns>System.Byte.</returns>
        /// <exception cref="ArgumentException">Invalid combination</exception>
        /// <autogeneratedoc />
        public static byte AddressFromPins(PinState Adr0, PinState Adr1)
        {
            byte addr = 0b1101000; // Base value from doc

            switch (new ValueTuple<PinState, PinState>(Adr0, Adr1))
            { //TODO Remove C# 8 dependency for pull request
                case (PinState.Low, PinState.Low):
                case (PinState.Floating, PinState.Floating):
                    break;

                case (PinState.Low, PinState.Floating):
                    addr += 1;
                    break;

                case (PinState.Low, PinState.High):
                    addr += 2;
                    break;

                case (PinState.High, PinState.Low):
                    addr += 4;
                    break;

                case (PinState.High, PinState.Floating):
                    addr += 5;
                    break;

                case (PinState.High, PinState.High):
                    addr += 6;
                    break;

                case (PinState.Floating, PinState.Low):
                    addr += 3;
                    break;

                case (PinState.Floating, PinState.High):
                    addr += 7;
                    break;

                default:
                    throw new ArgumentException("Invalid combination");
            }

            return addr;
        }

        public static byte SetChannelBits(byte configByte, int channel)
        {
            if (channel > 3 || channel < 0)
                throw new ArgumentException("Channel numbers are only valid 0 to 3", nameof(channel));
            return (byte)((configByte & ~Helpers.Masks.ChannelMask) | ((byte)channel << 5));
        }

        public static byte SetGainBits(byte configByte, GainEnum gain)
        {
            return (byte)((configByte & ~Helpers.Masks.GainMask) | (byte)gain);
        }

        public static byte SetModeBit(byte configByte, ModeEnum mode)
        {
            return (byte)((configByte & ~Helpers.Masks.ModeMask) | (byte)mode);
        }

        public static byte SetReadyBit(byte configByte, bool ready)
        {
            return (byte)(ready ? configByte & ~Helpers.Masks.ReadyMask : configByte | Helpers.Masks.ReadyMask);
        }

        public static byte SetResolutionBits(byte configByte, ResolutionEnum resolution)
        {
            return (byte)((configByte & ~Helpers.Masks.ResolutionMask) | (byte)resolution);
        }

        public static int UpdateFrequency(ResolutionEnum res)
        {
            switch (res)
            {
                case ResolutionEnum.Bit12:
                    return 240;

                case ResolutionEnum.Bit14:
                    return 60;

                case ResolutionEnum.Bit16:
                    return 15;

                default:
                    throw new ArgumentOutOfRangeException(nameof(res), res, null);
            }
        }

        // From datasheet 5.2
        public static class Masks
        {
            #region Public Fields

            public const byte ChannelMask = 0b01100000;
            public const byte GainMask = 0b00000011;
            public const byte ModeMask = 0b00010000;
            public const byte ReadyMask = 0b10000000;
            public const byte ResolutionMask = 0b00001100;

            #endregion Public Fields
        }
    }
}
