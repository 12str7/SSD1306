@page "/"

@using Iot.Device.VirtualGpio
@using Iot.Device.KeyMatrix
@using System.Device.Gpio
@using System.Device.Spi
@using System.Drawing
@using System.Threading

@implements IDisposable

@code {
    private static int PinCount = 8;
    private static string[] PinName = new[] { "R0", "R1", "R2", "R3", "C0", "C1", "C2", "C3" };

    private VirtualGpioController gpio = null!;
    private KeyMatrix keyMatrix = null!;

    private int MaxGpioTickCount = 500;
    private bool pause = false;

    private Queue<PinValue>[] gpioPinValues = PinName.Select(m => new Queue<PinValue>()).ToArray();

    private bool[,] buttonState = new bool[4, 4];
    private bool[,] keyState = new bool[4, 4];

    private bool disposing = false;

    public void Dispose()
    {
        disposing = true;

        keyMatrix?.Dispose();
        keyMatrix = null!;

        gpio?.Dispose();
        gpio = null!;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            gpio = VirtualGpioController.Create(PinCount);
            gpio.OutputPinValueChanged += OutputPinValueChanged;

            keyMatrix = new KeyMatrix(new[] { 0, 1, 2, 3 }, new[] { 4, 5, 6, 7 }, TimeSpan.FromMilliseconds(1), gpio);
            keyMatrix.KeyEvent += KeyEvent;

            StartRefreash();
            keyMatrix.StartListeningKeyEvent();
        }
    }

    private void StartRefreash()
    {
        Task.Run(() =>
        {
            while (!disposing && !pause)
            {
                InvokeAsync(StateHasChanged);
                Thread.Sleep(10);
            }
        });
    }

    private void Pause(ChangeEventArgs e)
    {
        if ((bool)(e.Value!))
        {
            pause = true;
        }
        else
        {
            pause = false;
            StartRefreash();
        }
    }

    private void SetButton(int row, int column, bool pressed)
    {
        buttonState[row, column] = pressed;
    }

    private void KeyEvent(object sender, KeyMatrixEvent keyMatrixEvent)
    {
        keyState[keyMatrixEvent.Output, keyMatrixEvent.Input] = keyMatrixEvent.EventType == PinEventTypes.Rising;
        InvokeAsync(StateHasChanged);
    }

    private void OutputPinValueChanged(object sender, PinValueChangedEventArgs pinValueChangedEventArgs)
    {
        if (disposing)
        {
            return;
        }

        ProcessKeyMatrixCircuit(pinValueChangedEventArgs);

        lock (gpioPinValues)
        {
            for (var pin = 0; pin < PinCount; pin++)
            {
                if (pinValueChangedEventArgs.PinNumber == pin)
                {
                    switch (pinValueChangedEventArgs.ChangeType)
                    {
                        case PinEventTypes.None:
                            {
                                gpioPinValues[pin].Enqueue(gpio.Read(pin));
                                gpioPinValues[pin].Enqueue(gpio.Read(pin));
                                break;
                            }
                        case PinEventTypes.Rising:
                            {
                                gpioPinValues[pin].Enqueue(PinValue.Low);
                                gpioPinValues[pin].Enqueue(PinValue.High);
                                break;
                            }
                        case PinEventTypes.Falling:
                            {
                                gpioPinValues[pin].Enqueue(PinValue.High);
                                gpioPinValues[pin].Enqueue(PinValue.Low);
                                break;
                            }
                    }
                }
                else
                {
                    gpioPinValues[pin].Enqueue(gpio.Read(pin));
                    gpioPinValues[pin].Enqueue(gpio.Read(pin));
                }

                if (gpioPinValues[pin].Count > MaxGpioTickCount)
                {
                    gpioPinValues[pin].Dequeue();
                    gpioPinValues[pin].Dequeue();
                }
            }
        }
    }

    private void ProcessKeyMatrixCircuit(PinValueChangedEventArgs pinValueChangedEventArgs)
    {
        // for output(row) pins
        if (pinValueChangedEventArgs.PinNumber < 4)
        {
            var row = pinValueChangedEventArgs.PinNumber;

            // for every button in this row
            for (var column = 0; column < 4; column++)
            {
                var inputPin = column + 4;
                if (buttonState[row, column])
                {
                    // pressed: connect
                    gpio.Input(inputPin, gpio.Read(pinValueChangedEventArgs.PinNumber));
                }
                else
                {
                    // released: pull down
                    gpio.Input(inputPin, 0);
                }
            }
        }
    }
}

@if (gpio != null && !disposing)
{
    <div class="d-flex flex-column">
        <div class="d-flex flex-row">
            <div class="GPIO">Pin</div>
            <div class="Open">Open</div>
            <div class="Mode">Mode</div>
            <div class="Value">Samples</div>
            <label class="ms-5"><input type="checkbox" @onchange="Pause">pause</label>
        </div>

        <hr class="my-2" />

        @lock (gpioPinValues)
        {
            for (var pin = 0; pin < PinCount; pin++)
            {
                <div class="@(gpio.IsPinOpen(pin)?"":"text-muted") d-flex flex-row align-items-center">
                    <div class="GPIO">@(PinName[pin])</div>
                    <div class="Open">@(gpio.IsPinOpen(pin))</div>
                    <div class="Mode">@(gpio.IsPinOpen(pin)?gpio.GetPinMode(pin):"N/A")</div>
                    <div class="PinEventType d-flex flex-row">

                        @foreach (var gv in gpioPinValues[pin].ToArray())
                        {
                            <div class="@(gv == 0?"PinValueLow":"PinValueHigh")" />
                        }
                    </div>
                </div>
            }
        }
    </div>

    <div class="KeyMatrix d-inline-block me-5 mr-5 mt-5">
        <button @onmousedown="()=>{SetButton(0,0,true);}" @onmouseup="()=>{SetButton(0,0,false);}">1</button><button @onmousedown="()=>{SetButton(0,1,true);}" @onmouseup="()=>{SetButton(0,1,false);}">2</button><button @onmousedown="()=>{SetButton(0,2,true);}" @onmouseup="()=>{SetButton(0,2,false);}">3</button><button @onmousedown="()=>{SetButton(0,3,true);}" @onmouseup="()=>{SetButton(0,3,false);}">A</button><br />
        <button @onmousedown="()=>{SetButton(1,0,true);}" @onmouseup="()=>{SetButton(1,0,false);}">4</button><button @onmousedown="()=>{SetButton(1,1,true);}" @onmouseup="()=>{SetButton(1,1,false);}">5</button><button @onmousedown="()=>{SetButton(1,2,true);}" @onmouseup="()=>{SetButton(1,2,false);}">6</button><button @onmousedown="()=>{SetButton(1,3,true);}" @onmouseup="()=>{SetButton(1,3,false);}">B</button><br />
        <button @onmousedown="()=>{SetButton(2,0,true);}" @onmouseup="()=>{SetButton(2,0,false);}">7</button><button @onmousedown="()=>{SetButton(2,1,true);}" @onmouseup="()=>{SetButton(2,1,false);}">8</button><button @onmousedown="()=>{SetButton(2,2,true);}" @onmouseup="()=>{SetButton(2,2,false);}">9</button><button @onmousedown="()=>{SetButton(2,3,true);}" @onmouseup="()=>{SetButton(2,3,false);}">C</button><br />
        <button @onmousedown="()=>{SetButton(3,0,true);}" @onmouseup="()=>{SetButton(3,0,false);}">*</button><button @onmousedown="()=>{SetButton(3,1,true);}" @onmouseup="()=>{SetButton(3,1,false);}">0</button><button @onmousedown="()=>{SetButton(3,2,true);}" @onmouseup="()=>{SetButton(3,2,false);}">#</button><button @onmousedown="()=>{SetButton(3,3,true);}" @onmouseup="()=>{SetButton(3,3,false);}">D</button><br />
        key matrix
    </div>
    <div class="KeyMatrix d-inline-block">
        <button class="active-@(keyState[0,0])" disabled>1</button><button class="active-@(keyState[0,1])" disabled>2</button><button class="active-@(keyState[0,2])" disabled>3</button><button class="active-@(keyState[0,3])" disabled>A</button><br />
        <button class="active-@(keyState[1,0])" disabled>4</button><button class="active-@(keyState[1,1])" disabled>5</button><button class="active-@(keyState[1,2])" disabled>6</button><button class="active-@(keyState[1,3])" disabled>B</button><br />
        <button class="active-@(keyState[2,0])" disabled>7</button><button class="active-@(keyState[2,1])" disabled>8</button><button class="active-@(keyState[2,2])" disabled>9</button><button class="active-@(keyState[2,3])" disabled>C</button><br />
        <button class="active-@(keyState[3,0])" disabled>*</button><button class="active-@(keyState[3,1])" disabled>0</button><button class="active-@(keyState[3,2])" disabled>#</button><button class="active-@(keyState[3,3])" disabled>D</button><br />
        program reference
    </div>

    <div>click button and drag out to hold, click again to release.</div>
}
